let is_playing = false
let rows = [{
  instrument: 'hat_10',
  pads: [repeat 1 8]
}, {
  instrument: 'kick_01',
  pads: [1, 0, 0, 0, 0, 1, 0, 0]
}, {
  instrument: 'snare_01',
  pads: [0, 0, 1, 0, 0, 0, 1, 0]
}]
let instruments = {}
let column = 0
let bpm = 100

--
const AudioContext = window.AudioContext || window.webkitAudioContext
const audioCtx = new AudioContext()
let timeout = undefined

function play () {
  if (audioCtx.state === 'suspended') {
    audioCtx.resume();
  }
  let update = () => {
    column = (column+1)%8;
    rows.forEach(row => {
      if (row.pads[column] === 1) {
        playSound(instruments[row.instrument])
      }
    })
    $sync();
    timeout = setTimeout(update, 300);
  }
  update();
}

function pause () {
  clearTimeout(timeout);
}

function addRow () {
  rows.push({
    instrument: 'snare_01',
    pads: [0, 0, 0, 0, 0, 0, 0, 0]
  })
}

function playSound (buf) {
  let source = audioCtx.createBufferSource();
  source.buffer = buf;
  source.connect(audioCtx.destination);
  source.start();
}

async function getAudioFile (path) {
  let data = await fetch(path);
  let buf = await data.arrayBuffer();
  let audio = await audioCtx.decodeAudioData(buf);
  return audio;
}

async function init () {
  for (i = 1; i <= 10; i++) {
    let num = i < 10 ? `0${i}` : '10';
    instruments[`hat_${num}`] = await getAudioFile(`instruments/hat_${num}.wav`);
    instruments[`snare_${num}`] = await getAudioFile(`instruments/snare_${num}.wav`);
    instruments[`kick_${num}`] = await getAudioFile(`instruments/kick_${num}.wav`);
  }
  $sync();
}

function playPause () {
  if (is_playing) {
    pause();
    is_playing = false;
    column = 0;
  } else {
    play();
    is_playing = true;
  }
}

init()
--

// adom bug: if a hidden element with the same tagname as an adjacent element is suddenly
// not hidden, it will adopt the previous properties
// quick fix: make sure the class property is set to empty if it is not present
// better fix: tbd
// make sure root keyword cannot be in a tag (do in parser)
// adom bug: imports are relative to the root, and not the current file

import 'components/page.adom'
import 'components/slider.adom'
import 'components/instruments.adom'
import 'components/pad.adom'

Page [
  div.container root [
    h3.title "Beat Machine"
    //if (!hide) div "test"
    div style='text-align:center;'[
      button on:click="playPause()" [
        i class={[is_playing ? 'fa fa-pause' : 'fa fa-play']} []
      ]
    ]
    Slider[]
    div.board [
      div.column style="top:0;bottom:0;left:{{5 + column * 60}};" []
      each (row in rows) [
        div.row [
          each (_, i in row.pads) Pad row={row} i={i} []
          Instruments row={row} []
        ]
      ]
    ]
    div style='text-align:center;' [
      button on:click="addRow()" "add row"
    ]
  ]
]
